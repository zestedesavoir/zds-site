diff --git a/.project b/.project
new file mode 100644
index 0000000..e91beea
--- /dev/null
+++ b/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>GitPython</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.python.pydev.PyDevBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.python.pydev.pythonNature</nature>
+	</natures>
+</projectDescription>
diff --git a/.pydevproject b/.pydevproject
new file mode 100644
index 0000000..40e9f40
--- /dev/null
+++ b/.pydevproject
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<?eclipse-pydev version="1.0"?><pydev_project>
+<pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER">Default</pydev_property>
+<pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION">python 2.7</pydev_property>
+</pydev_project>
diff --git a/GitPython.egg-info/PKG-INFO b/GitPython.egg-info/PKG-INFO
new file mode 100644
index 0000000..f94fa7f
--- /dev/null
+++ b/GitPython.egg-info/PKG-INFO
@@ -0,0 +1,19 @@
+Metadata-Version: 1.1
+Name: GitPython
+Version: 0.3.2.RC1
+Summary: Python Git Library
+Home-page: http://gitorious.org/projects/git-python/
+Author: Sebastian Thiel, Michael Trier
+Author-email: byronimo@gmail.com, mtrier@gmail.com
+License: BSD License
+Description: GitPython is a python library used to interact with Git repositories
+Platform: UNKNOWN
+Classifier: Development Status :: 4 - Beta
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: BSD License
+Classifier: Operating System :: OS Independent
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 2.5
+Classifier: Programming Language :: Python :: 2.6
+Classifier: Topic :: Software Development :: Libraries :: Python Modules
+Requires: gitdb (>=0.5.1)
diff --git a/GitPython.egg-info/SOURCES.txt b/GitPython.egg-info/SOURCES.txt
new file mode 100644
index 0000000..44f826f
--- /dev/null
+++ b/GitPython.egg-info/SOURCES.txt
@@ -0,0 +1,116 @@
+AUTHORS
+CHANGES
+LICENSE
+MANIFEST.in
+README.rst
+VERSION
+setup.py
+GitPython.egg-info/PKG-INFO
+GitPython.egg-info/SOURCES.txt
+GitPython.egg-info/dependency_links.txt
+GitPython.egg-info/not-zip-safe
+GitPython.egg-info/requires.txt
+GitPython.egg-info/top_level.txt
+git/__init__.py
+git/cmd.py
+git/config.py
+git/db.py
+git/diff.py
+git/exc.py
+git/odict.py
+git/remote.py
+git/util.py
+git/index/__init__.py
+git/index/base.py
+git/index/fun.py
+git/index/typ.py
+git/index/util.py
+git/objects/__init__.py
+git/objects/base.py
+git/objects/blob.py
+git/objects/commit.py
+git/objects/fun.py
+git/objects/tag.py
+git/objects/tree.py
+git/objects/util.py
+git/objects/submodule/__init__.py
+git/objects/submodule/base.py
+git/objects/submodule/root.py
+git/objects/submodule/util.py
+git/refs/__init__.py
+git/refs/head.py
+git/refs/log.py
+git/refs/reference.py
+git/refs/remote.py
+git/refs/symbolic.py
+git/refs/tag.py
+git/repo/__init__.py
+git/repo/base.py
+git/repo/fun.py
+git/test/__init__.py
+git/test/test_actor.py
+git/test/test_base.py
+git/test/test_blob.py
+git/test/test_commit.py
+git/test/test_config.py
+git/test/test_db.py
+git/test/test_diff.py
+git/test/test_fun.py
+git/test/test_git.py
+git/test/test_index.py
+git/test/test_reflog.py
+git/test/test_refs.py
+git/test/test_remote.py
+git/test/test_repo.py
+git/test/test_stats.py
+git/test/test_submodule.py
+git/test/test_tree.py
+git/test/test_util.py
+git/test/fixtures/blame
+git/test/fixtures/cat_file_blob
+git/test/fixtures/cat_file_blob_nl
+git/test/fixtures/cat_file_blob_size
+git/test/fixtures/diff_2
+git/test/fixtures/diff_2f
+git/test/fixtures/diff_f
+git/test/fixtures/diff_i
+git/test/fixtures/diff_mode_only
+git/test/fixtures/diff_new_mode
+git/test/fixtures/diff_numstat
+git/test/fixtures/diff_p
+git/test/fixtures/diff_rename
+git/test/fixtures/diff_tree_numstat_root
+git/test/fixtures/for_each_ref_with_path_component
+git/test/fixtures/git_config
+git/test/fixtures/git_config_global
+git/test/fixtures/index
+git/test/fixtures/index_merge
+git/test/fixtures/ls_tree_a
+git/test/fixtures/ls_tree_b
+git/test/fixtures/ls_tree_commit
+git/test/fixtures/reflog_HEAD
+git/test/fixtures/reflog_invalid_date
+git/test/fixtures/reflog_invalid_email
+git/test/fixtures/reflog_invalid_newsha
+git/test/fixtures/reflog_invalid_oldsha
+git/test/fixtures/reflog_invalid_sep
+git/test/fixtures/reflog_master
+git/test/fixtures/rev_list
+git/test/fixtures/rev_list_bisect_all
+git/test/fixtures/rev_list_commit_diffs
+git/test/fixtures/rev_list_commit_idabbrev
+git/test/fixtures/rev_list_commit_stats
+git/test/fixtures/rev_list_count
+git/test/fixtures/rev_list_delta_a
+git/test/fixtures/rev_list_delta_b
+git/test/fixtures/rev_list_single
+git/test/fixtures/rev_parse
+git/test/fixtures/show_empty_commit
+git/test/lib/__init__.py
+git/test/lib/asserts.py
+git/test/lib/helper.py
+git/test/performance/lib.py
+git/test/performance/test_commit.py
+git/test/performance/test_odb.py
+git/test/performance/test_streams.py
+git/test/performance/test_utils.py
\ No newline at end of file
diff --git a/GitPython.egg-info/dependency_links.txt b/GitPython.egg-info/dependency_links.txt
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/GitPython.egg-info/dependency_links.txt
@@ -0,0 +1 @@
+
diff --git a/GitPython.egg-info/not-zip-safe b/GitPython.egg-info/not-zip-safe
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/GitPython.egg-info/not-zip-safe
@@ -0,0 +1 @@
+
diff --git a/GitPython.egg-info/requires.txt b/GitPython.egg-info/requires.txt
new file mode 100644
index 0000000..5cfbe86
--- /dev/null
+++ b/GitPython.egg-info/requires.txt
@@ -0,0 +1 @@
+gitdb >= 0.5.1
\ No newline at end of file
diff --git a/GitPython.egg-info/top_level.txt b/GitPython.egg-info/top_level.txt
new file mode 100644
index 0000000..5664e30
--- /dev/null
+++ b/GitPython.egg-info/top_level.txt
@@ -0,0 +1 @@
+git
diff --git a/git/ext/gitdb b/git/ext/gitdb
deleted file mode 160000
index 656a2e0..0000000
--- a/git/ext/gitdb
+++ /dev/null
-Subproject commit 656a2e0b4da7d60ac638d1615751a89efb3a4eee
diff --git a/git/index/base.py b/git/index/base.py
index 354319b..9f76adf 100644
--- a/git/index/base.py
+++ b/git/index/base.py
@@ -873,7 +873,7 @@
 
 		return out
 
-	def commit(self, message, parent_commits=None, head=True):
+	def commit(self, message, parent_commits=None, head=True, author=None, committer=None):
 		"""Commit the current default index file, creating a commit object.
 
 		For more information on the arguments, see tree.commit.
@@ -884,7 +884,7 @@
 		:return:
 			Commit object representing the new commit"""
 		tree = self.write_tree()
-		return Commit.create_from_tree(self.repo, tree, message, parent_commits, head)
+		return Commit.create_from_tree(self.repo, tree, message, parent_commits, head, author=author, committer=committer)
 
 	@classmethod
 	def _flush_stdin_and_wait(cls, proc, ignore_stdout = False):
diff --git a/git/objects/commit.py b/git/objects/commit.py
index fd4187b..5413059 100644
--- a/git/objects/commit.py
+++ b/git/objects/commit.py
@@ -254,7 +254,7 @@
 		
 		
 	@classmethod
-	def create_from_tree(cls, repo, tree, message, parent_commits=None, head=False):
+	def create_from_tree(cls, repo, tree, message, parent_commits=None, head=False, author=None, committer=None):
 		"""Commit the given tree, creating a commit object.
 		
 		:param repo: Repo object the commit should be part of 
@@ -299,8 +299,14 @@
 		cr = repo.config_reader()
 		env = os.environ
 		
-		committer = Actor.committer(cr)
-		author = Actor.author(cr)
+		if author is None and committer is None:
+			committer = Actor.committer(cr)
+			author = Actor.author(cr)
+		elif author is None:
+			author = Actor.author(cr)
+		elif committer is None:
+			committer = Actor.committer(cr)
+		
 		
 		# PARSE THE DATES
 		unix_time = int(time())
diff --git a/git/refs/log.py b/git/refs/log.py
index 0e97772..aca47d5 100644
--- a/git/refs/log.py
+++ b/git/refs/log.py
@@ -247,7 +247,7 @@
 			raise ValueError("Shas need to be given in binary format")
 		#END handle sha type
 		assure_directory_exists(filepath, is_file=True)
-		entry = RefLogEntry((bin_to_hex(oldbinsha), bin_to_hex(newbinsha), Actor.committer(config_reader), (int(time.time()), time.altzone), message))
+		entry = RefLogEntry((bin_to_hex(oldbinsha), bin_to_hex(newbinsha), config_reader, (int(time.time()), time.altzone), message))
 		
 		lf = LockFile(filepath)
 		lf._obtain_lock_or_raise()
diff --git a/git/refs/symbolic.py b/git/refs/symbolic.py
index 8556a65..05d12b7 100644
--- a/git/refs/symbolic.py
+++ b/git/refs/symbolic.py
@@ -355,7 +355,7 @@
 		:param newbinsha: The sha the ref points to now. If None, our current commit sha
 			will be used
 		:return: added RefLogEntry instance"""
-		return RefLog.append_entry(self.repo.config_reader(), RefLog.path(self), oldbinsha, 
+		return RefLog.append_entry(self.commit.committer, RefLog.path(self), oldbinsha, 
 									(newbinsha is None and self.commit.binsha) or newbinsha, 
 									message) 
 