diff --git a/git/index/base.py b/git/index/base.py
index 354319b..9f76adf 100644
--- a/git/index/base.py
+++ b/git/index/base.py
@@ -873,7 +873,7 @@ class IndexFile(LazyMixin, diff.Diffable, Serializable):
 
 		return out
 
-	def commit(self, message, parent_commits=None, head=True):
+	def commit(self, message, parent_commits=None, head=True, author=None, committer=None):
 		"""Commit the current default index file, creating a commit object.
 
 		For more information on the arguments, see tree.commit.
@@ -884,7 +884,7 @@ class IndexFile(LazyMixin, diff.Diffable, Serializable):
 		:return:
 			Commit object representing the new commit"""
 		tree = self.write_tree()
-		return Commit.create_from_tree(self.repo, tree, message, parent_commits, head)
+		return Commit.create_from_tree(self.repo, tree, message, parent_commits, head, author=author, committer=committer)
 
 	@classmethod
 	def _flush_stdin_and_wait(cls, proc, ignore_stdout = False):
diff --git a/git/objects/commit.py b/git/objects/commit.py
index fd4187b..b1530ed 100644
--- a/git/objects/commit.py
+++ b/git/objects/commit.py
@@ -254,7 +254,7 @@ class Commit(base.Object, Iterable, Diffable, Traversable, Serializable):
 		
 		
 	@classmethod
-	def create_from_tree(cls, repo, tree, message, parent_commits=None, head=False):
+	def create_from_tree(cls, repo, tree, message, parent_commits=None, head=False, author=None, committer=None):
 		"""Commit the given tree, creating a commit object.
 		
 		:param repo: Repo object the commit should be part of 
@@ -299,8 +299,13 @@ class Commit(base.Object, Iterable, Diffable, Traversable, Serializable):
 		cr = repo.config_reader()
 		env = os.environ
 		
-		committer = Actor.committer(cr)
-		author = Actor.author(cr)
+		if author is None and committer is None:
+			committer = Actor.committer(cr)
+			author = Actor.author(cr)
+		elif author is None:
+			author = Actor.author(cr)
+		elif committer is None:
+			committer = Actor.committer(cr)
 		
 		# PARSE THE DATES
 		unix_time = int(time())
diff --git a/git/refs/log.py b/git/refs/log.py
index 0e97772..aca47d5 100644
--- a/git/refs/log.py
+++ b/git/refs/log.py
@@ -247,7 +247,7 @@ class RefLog(list, Serializable):
 			raise ValueError("Shas need to be given in binary format")
 		#END handle sha type
 		assure_directory_exists(filepath, is_file=True)
-		entry = RefLogEntry((bin_to_hex(oldbinsha), bin_to_hex(newbinsha), Actor.committer(config_reader), (int(time.time()), time.altzone), message))
+		entry = RefLogEntry((bin_to_hex(oldbinsha), bin_to_hex(newbinsha), config_reader, (int(time.time()), time.altzone), message))
 		
 		lf = LockFile(filepath)
 		lf._obtain_lock_or_raise()
diff --git a/git/refs/symbolic.py b/git/refs/symbolic.py
index 8556a65..0e950e5 100644
--- a/git/refs/symbolic.py
+++ b/git/refs/symbolic.py
@@ -352,10 +352,9 @@ class SymbolicReference(object):
 		
 		:param oldbinsha: binary sha this ref used to point to
 		:param message: A message describing the change
-		:param newbinsha: The sha the ref points to now. If None, our current commit sha
-			will be used
+		:param newbinsha: The sha the ref points to now. If None, our current commit sha will be used
 		:return: added RefLogEntry instance"""
-		return RefLog.append_entry(self.repo.config_reader(), RefLog.path(self), oldbinsha, 
+		return RefLog.append_entry(self.commit.committer, RefLog.path(self), oldbinsha,
 									(newbinsha is None and self.commit.binsha) or newbinsha, 
 									message) 
 
